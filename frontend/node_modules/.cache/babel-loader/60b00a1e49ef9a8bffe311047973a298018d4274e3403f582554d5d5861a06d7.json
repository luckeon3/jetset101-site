{"ast":null,"code":"\"use client\";\n\n// src/accordion.tsx\nimport _objectSpread from \"/app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/app/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"type\"],\n  _excluded2 = [\"value\", \"defaultValue\", \"onValueChange\", \"collapsible\"],\n  _excluded3 = [\"value\", \"defaultValue\", \"onValueChange\"],\n  _excluded4 = [\"__scopeAccordion\", \"disabled\", \"dir\", \"orientation\"],\n  _excluded5 = [\"__scopeAccordion\", \"value\"],\n  _excluded6 = [\"__scopeAccordion\"],\n  _excluded7 = [\"__scopeAccordion\"],\n  _excluded8 = [\"__scopeAccordion\"];\nimport React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\nimport { createCollapsibleScope } from \"@radix-ui/react-collapsible\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { jsx } from \"react/jsx-runtime\";\nvar ACCORDION_NAME = \"Accordion\";\nvar ACCORDION_KEYS = [\"Home\", \"End\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\"];\nvar [Collection, useCollection, createCollectionScope] = createCollection(ACCORDION_NAME);\nvar [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [createCollectionScope, createCollapsibleScope]);\nvar useCollapsibleScope = createCollapsibleScope();\nvar Accordion = React.forwardRef((props, forwardedRef) => {\n  const {\n      type\n    } = props,\n    accordionProps = _objectWithoutProperties(props, _excluded);\n  const singleProps = accordionProps;\n  const multipleProps = accordionProps;\n  return /* @__PURE__ */jsx(Collection.Provider, {\n    scope: props.__scopeAccordion,\n    children: type === \"multiple\" ? /* @__PURE__ */jsx(AccordionImplMultiple, _objectSpread(_objectSpread({}, multipleProps), {}, {\n      ref: forwardedRef\n    })) : /* @__PURE__ */jsx(AccordionImplSingle, _objectSpread(_objectSpread({}, singleProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nAccordion.displayName = ACCORDION_NAME;\nvar [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);\nvar [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(ACCORDION_NAME, {\n  collapsible: false\n});\nvar AccordionImplSingle = React.forwardRef((props, forwardedRef) => {\n  const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false\n    } = props,\n    accordionSingleProps = _objectWithoutProperties(props, _excluded2);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"\",\n    onChange: onValueChange,\n    caller: ACCORDION_NAME\n  });\n  return /* @__PURE__ */jsx(AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value: React.useMemo(() => value ? [value] : [], [value]),\n    onItemOpen: setValue,\n    onItemClose: React.useCallback(() => collapsible && setValue(\"\"), [collapsible, setValue]),\n    children: /* @__PURE__ */jsx(AccordionCollapsibleProvider, {\n      scope: props.__scopeAccordion,\n      collapsible,\n      children: /* @__PURE__ */jsx(AccordionImpl, _objectSpread(_objectSpread({}, accordionSingleProps), {}, {\n        ref: forwardedRef\n      }))\n    })\n  });\n});\nvar AccordionImplMultiple = React.forwardRef((props, forwardedRef) => {\n  const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {}\n    } = props,\n    accordionMultipleProps = _objectWithoutProperties(props, _excluded3);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue !== null && defaultValue !== void 0 ? defaultValue : [],\n    onChange: onValueChange,\n    caller: ACCORDION_NAME\n  });\n  const handleItemOpen = React.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...prevValue, itemValue];\n  }), [setValue]);\n  const handleItemClose = React.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return prevValue.filter(value2 => value2 !== itemValue);\n  }), [setValue]);\n  return /* @__PURE__ */jsx(AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value,\n    onItemOpen: handleItemOpen,\n    onItemClose: handleItemClose,\n    children: /* @__PURE__ */jsx(AccordionCollapsibleProvider, {\n      scope: props.__scopeAccordion,\n      collapsible: true,\n      children: /* @__PURE__ */jsx(AccordionImpl, _objectSpread(_objectSpread({}, accordionMultipleProps), {}, {\n        ref: forwardedRef\n      }))\n    })\n  });\n});\nvar [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);\nvar AccordionImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAccordion,\n      disabled,\n      dir,\n      orientation = \"vertical\"\n    } = props,\n    accordionProps = _objectWithoutProperties(props, _excluded4);\n  const accordionRef = React.useRef(null);\n  const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n  const getItems = useCollection(__scopeAccordion);\n  const direction = useDirection(dir);\n  const isDirectionLTR = direction === \"ltr\";\n  const handleKeyDown = composeEventHandlers(props.onKeyDown, event => {\n    var _triggerCollection$cl;\n    if (!ACCORDION_KEYS.includes(event.key)) return;\n    const target = event.target;\n    const triggerCollection = getItems().filter(item => {\n      var _item$ref$current;\n      return !((_item$ref$current = item.ref.current) !== null && _item$ref$current !== void 0 && _item$ref$current.disabled);\n    });\n    const triggerIndex = triggerCollection.findIndex(item => item.ref.current === target);\n    const triggerCount = triggerCollection.length;\n    if (triggerIndex === -1) return;\n    event.preventDefault();\n    let nextIndex = triggerIndex;\n    const homeIndex = 0;\n    const endIndex = triggerCount - 1;\n    const moveNext = () => {\n      nextIndex = triggerIndex + 1;\n      if (nextIndex > endIndex) {\n        nextIndex = homeIndex;\n      }\n    };\n    const movePrev = () => {\n      nextIndex = triggerIndex - 1;\n      if (nextIndex < homeIndex) {\n        nextIndex = endIndex;\n      }\n    };\n    switch (event.key) {\n      case \"Home\":\n        nextIndex = homeIndex;\n        break;\n      case \"End\":\n        nextIndex = endIndex;\n        break;\n      case \"ArrowRight\":\n        if (orientation === \"horizontal\") {\n          if (isDirectionLTR) {\n            moveNext();\n          } else {\n            movePrev();\n          }\n        }\n        break;\n      case \"ArrowDown\":\n        if (orientation === \"vertical\") {\n          moveNext();\n        }\n        break;\n      case \"ArrowLeft\":\n        if (orientation === \"horizontal\") {\n          if (isDirectionLTR) {\n            movePrev();\n          } else {\n            moveNext();\n          }\n        }\n        break;\n      case \"ArrowUp\":\n        if (orientation === \"vertical\") {\n          movePrev();\n        }\n        break;\n    }\n    const clampedIndex = nextIndex % triggerCount;\n    (_triggerCollection$cl = triggerCollection[clampedIndex].ref.current) === null || _triggerCollection$cl === void 0 || _triggerCollection$cl.focus();\n  });\n  return /* @__PURE__ */jsx(AccordionImplProvider, {\n    scope: __scopeAccordion,\n    disabled,\n    direction: dir,\n    orientation,\n    children: /* @__PURE__ */jsx(Collection.Slot, {\n      scope: __scopeAccordion,\n      children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({}, accordionProps), {}, {\n        \"data-orientation\": orientation,\n        ref: composedRefs,\n        onKeyDown: disabled ? void 0 : handleKeyDown\n      }))\n    })\n  });\n});\nvar ITEM_NAME = \"AccordionItem\";\nvar [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME);\nvar AccordionItem = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAccordion,\n      value\n    } = props,\n    accordionItemProps = _objectWithoutProperties(props, _excluded5);\n  const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n  const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  const triggerId = useId();\n  const open = value && valueContext.value.includes(value) || false;\n  const disabled = accordionContext.disabled || props.disabled;\n  return /* @__PURE__ */jsx(AccordionItemProvider, {\n    scope: __scopeAccordion,\n    open,\n    disabled,\n    triggerId,\n    children: /* @__PURE__ */jsx(CollapsiblePrimitive.Root, _objectSpread(_objectSpread(_objectSpread({\n      \"data-orientation\": accordionContext.orientation,\n      \"data-state\": getState(open)\n    }, collapsibleScope), accordionItemProps), {}, {\n      ref: forwardedRef,\n      disabled,\n      open,\n      onOpenChange: open2 => {\n        if (open2) {\n          valueContext.onItemOpen(value);\n        } else {\n          valueContext.onItemClose(value);\n        }\n      }\n    }))\n  });\n});\nAccordionItem.displayName = ITEM_NAME;\nvar HEADER_NAME = \"AccordionHeader\";\nvar AccordionHeader = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAccordion\n    } = props,\n    headerProps = _objectWithoutProperties(props, _excluded6);\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n  return /* @__PURE__ */jsx(Primitive.h3, _objectSpread(_objectSpread({\n    \"data-orientation\": accordionContext.orientation,\n    \"data-state\": getState(itemContext.open),\n    \"data-disabled\": itemContext.disabled ? \"\" : void 0\n  }, headerProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAccordionHeader.displayName = HEADER_NAME;\nvar TRIGGER_NAME = \"AccordionTrigger\";\nvar AccordionTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAccordion\n    } = props,\n    triggerProps = _objectWithoutProperties(props, _excluded7);\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n  const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  return /* @__PURE__ */jsx(Collection.ItemSlot, {\n    scope: __scopeAccordion,\n    children: /* @__PURE__ */jsx(CollapsiblePrimitive.Trigger, _objectSpread(_objectSpread(_objectSpread({\n      \"aria-disabled\": itemContext.open && !collapsibleContext.collapsible || void 0,\n      \"data-orientation\": accordionContext.orientation,\n      id: itemContext.triggerId\n    }, collapsibleScope), triggerProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nAccordionTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"AccordionContent\";\nvar AccordionContent = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAccordion\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded8);\n  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n  const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n  const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n  return /* @__PURE__ */jsx(CollapsiblePrimitive.Content, _objectSpread(_objectSpread(_objectSpread({\n    role: \"region\",\n    \"aria-labelledby\": itemContext.triggerId,\n    \"data-orientation\": accordionContext.orientation\n  }, collapsibleScope), contentProps), {}, {\n    ref: forwardedRef,\n    style: _objectSpread({\n      [\"--radix-accordion-content-height\"]: \"var(--radix-collapsible-content-height)\",\n      [\"--radix-accordion-content-width\"]: \"var(--radix-collapsible-content-width)\"\n    }, props.style)\n  }));\n});\nAccordionContent.displayName = CONTENT_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar Root2 = Accordion;\nvar Item = AccordionItem;\nvar Header = AccordionHeader;\nvar Trigger2 = AccordionTrigger;\nvar Content2 = AccordionContent;\nexport { Accordion, AccordionContent, AccordionHeader, AccordionItem, AccordionTrigger, Content2 as Content, Header, Item, Root2 as Root, Trigger2 as Trigger, createAccordionScope };","map":{"version":3,"names":["React","createContextScope","createCollection","useComposedRefs","composeEventHandlers","useControllableState","Primitive","CollapsiblePrimitive","createCollapsibleScope","useId","useDirection","jsx","ACCORDION_NAME","ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createAccordionContext","createAccordionScope","useCollapsibleScope","Accordion","forwardRef","props","forwardedRef","type","accordionProps","_objectWithoutProperties","_excluded","singleProps","multipleProps","Provider","scope","__scopeAccordion","children","AccordionImplMultiple","_objectSpread","ref","AccordionImplSingle","displayName","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","value","valueProp","defaultValue","onValueChange","accordionSingleProps","_excluded2","setValue","prop","defaultProp","onChange","caller","useMemo","onItemOpen","onItemClose","useCallback","AccordionImpl","accordionMultipleProps","_excluded3","handleItemOpen","itemValue","prevValue","arguments","length","undefined","handleItemClose","filter","value2","AccordionImplProvider","useAccordionContext","disabled","dir","orientation","_excluded4","accordionRef","useRef","composedRefs","getItems","direction","isDirectionLTR","handleKeyDown","onKeyDown","event","_triggerCollection$cl","includes","key","target","triggerCollection","item","_item$ref$current","current","triggerIndex","findIndex","triggerCount","preventDefault","nextIndex","homeIndex","endIndex","moveNext","movePrev","clampedIndex","focus","Slot","div","ITEM_NAME","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","_excluded5","accordionContext","valueContext","collapsibleScope","triggerId","open","Root","getState","onOpenChange","open2","HEADER_NAME","AccordionHeader","headerProps","_excluded6","itemContext","h3","TRIGGER_NAME","AccordionTrigger","triggerProps","_excluded7","collapsibleContext","ItemSlot","Trigger","id","CONTENT_NAME","AccordionContent","contentProps","_excluded8","Content","role","style","Root2","Item","Header","Trigger2","Content2"],"sources":["/app/frontend/node_modules/@radix-ui/react-accordion/src/accordion.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue ?? '',\n      onChange: onValueChange,\n      caller: ACCORDION_NAME,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={React.useMemo(() => (value ? [value] : []), [value])}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue ?? [],\n    onChange: onValueChange,\n    caller: ACCORDION_NAME,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n  direction: AccordionImplProps['dir'];\n  orientation: AccordionImplProps['orientation'];\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * The layout in which the Accordion operates.\n   * @default vertical\n   */\n  orientation?: React.AriaAttributes['aria-orientation'];\n  /**\n   * The language read direction.\n   */\n  dir?: Direction;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, dir, orientation = 'vertical', ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n    const direction = useDirection(dir);\n    const isDirectionLTR = direction === 'ltr';\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      const homeIndex = 0;\n      const endIndex = triggerCount - 1;\n\n      const moveNext = () => {\n        nextIndex = triggerIndex + 1;\n        if (nextIndex > endIndex) {\n          nextIndex = homeIndex;\n        }\n      };\n\n      const movePrev = () => {\n        nextIndex = triggerIndex - 1;\n        if (nextIndex < homeIndex) {\n          nextIndex = endIndex;\n        }\n      };\n\n      switch (event.key) {\n        case 'Home':\n          nextIndex = homeIndex;\n          break;\n        case 'End':\n          nextIndex = endIndex;\n          break;\n        case 'ArrowRight':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              moveNext();\n            } else {\n              movePrev();\n            }\n          }\n          break;\n        case 'ArrowDown':\n          if (orientation === 'vertical') {\n            moveNext();\n          }\n          break;\n        case 'ArrowLeft':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              movePrev();\n            } else {\n              moveNext();\n            }\n          }\n          break;\n        case 'ArrowUp':\n          if (orientation === 'vertical') {\n            movePrev();\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex]!.ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        disabled={disabled}\n        direction={dir}\n        orientation={orientation}\n      >\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            data-orientation={orientation}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-orientation={accordionContext.orientation}\n          data-state={getState(open)}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = React.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-orientation={accordionContext.orientation}\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          data-orientation={accordionContext.orientation}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        data-orientation={accordionContext.orientation}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}